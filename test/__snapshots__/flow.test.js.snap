// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`flow 1`] = `
"

Error ---------------------------------------------------------------------------------------- test/flow-example.js:8:42

Cannot call \`adderA\` with \`'foo'\` bound to \`b\` because string [1] is incompatible with number [2].

   test/flow-example.js:8:42
   8| const aFail: Promise<number> = adderA(1, 'foo');
                                               ^^^^^ [1]

References:
   test/flow-example.js:5:41
   5| const adderA = throat(5, (a: number, b: number): Promise<number> => Promise.resolve(a + b));
                                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- test/flow-example.js:9:33

Cannot assign \`adderA(...)\` to \`aFail2\` because number [1] is incompatible with string [2] in type argument \`R\` [3].

   test/flow-example.js:9:33
     9| const aFail2: Promise<string> = adderA(1, 2);
                                        ^^^^^^^^^^^^

References:
   test/flow-example.js:5:58
     5| const adderA = throat(5, (a: number, b: number): Promise<number> => Promise.resolve(a + b));
                                                                 ^^^^^^ [1]
   test/flow-example.js:9:23
     9| const aFail2: Promise<string> = adderA(1, 2);
                              ^^^^^^ [2]
   <absolute-dir>core.js:605:24
   605| declare class Promise<+R> {
                               ^ [3]


Error --------------------------------------------------------------------------------------- test/flow-example.js:14:42

Cannot call \`adderB\` with \`'foo'\` bound to \`b\` because string [1] is incompatible with number [2].

   test/flow-example.js:14:42
   14| const bFail: Promise<number> = adderB(1, 'foo');
                                                ^^^^^ [1]

References:
   test/flow-example.js:11:38
   11| const adderB = throat((a: number, b: number): Promise<number> => Promise.resolve(a + b), 5);
                                            ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- test/flow-example.js:15:33

Cannot assign \`adderB(...)\` to \`bFail2\` because number [1] is incompatible with string [2] in type argument \`R\` [3].

   test/flow-example.js:15:33
    15| const bFail2: Promise<string> = adderB(1, 2);
                                        ^^^^^^^^^^^^

References:
   test/flow-example.js:11:55
    11| const adderB = throat((a: number, b: number): Promise<number> => Promise.resolve(a + b), 5);
                                                              ^^^^^^ [1]
   test/flow-example.js:15:23
    15| const bFail2: Promise<string> = adderB(1, 2);
                              ^^^^^^ [2]
   <absolute-dir>core.js:605:24
   605| declare class Promise<+R> {
                               ^ [3]


Error --------------------------------------------------------------------------------------- test/flow-example.js:21:41

Cannot call \`throttle\` with function bound to \`fn\` because function [1] requires another argument from function
type [2].

   test/flow-example.js:21:41
   21| const tFail: Promise<number> = throttle((x: number) => Promise.resolve(x));
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   index.js.flow:5:54
    5| declare function throat(size: number): <TResult>(fn: () => Promise<TResult>) => Promise<TResult>;
                                                            ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- test/flow-example.js:22:42

Cannot call \`throttle\` with function bound to \`fn\` because function [1] requires another argument from function
type [2].

   test/flow-example.js:22:42
   22| const tFail2: Promise<string> = throttle((x: string) => Promise.resolve(x));
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   index.js.flow:5:54
    5| declare function throat(size: number): <TResult>(fn: () => Promise<TResult>) => Promise<TResult>;
                                                            ^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- test/flow-example.js:23:33

Cannot assign \`throttle(...)\` to \`tFail3\` because number [1] is incompatible with string [2] in type argument \`R\` [3].

   test/flow-example.js:23:33
    23| const tFail3: Promise<string> = throttle(() => Promise.resolve(5));
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test/flow-example.js:23:64
    23| const tFail3: Promise<string> = throttle(() => Promise.resolve(5));
                                                                       ^ [1]
   test/flow-example.js:23:23
    23| const tFail3: Promise<string> = throttle(() => Promise.resolve(5));
                              ^^^^^^ [2]
   <absolute-dir>core.js:605:24
   605| declare class Promise<+R> {
                               ^ [3]



Found 7 errors
"
`;
